#!/bin/zsh
# HoloISO Installer v2
# This defines all of the current variables.
CMD_PACMAN_INSTALL=(/usr/bin/pacman --noconfirm -S --needed --overwrite="*")
CMD_PACMAN_UPDATE=(/usr/bin/pacman -Sy)
CPU_VENDOR=$(cat /proc/cpuinfo | grep 'vendor' | uniq | cut -c 13-)
SYSTEM_LOCALE="${SYSTEM_LOCALE:-en_US.UTF-8 UTF-8}"
HOLO_INSTALL_DIR="${HOLO_INSTALL_DIR:-/mnt}"
IS_WIN600=$(cat /sys/devices/virtual/dmi/id/product_name | grep Win600)
IS_STEAMDECK=$(cat /sys/devices/virtual/dmi/id/product_name | grep Jupiter)
IS_BETA=$(cat /etc/pacman.conf | grep -e "jupiter-main")
    if [ -n "${IS_BETA}" ]; then
        echo "holy shit dude touch grass your system is broken and if you fixed it you probably didn't come outside for last 10 years"
	    UPD_BRANCH_JUPITER="jupiter-main"
	    UPD_BRANCH_OS_CORE="holo-main"
	    UPD_BRANCH_ARCH_CORE="core-main"
	    UPD_BRANCH_ARCH_EXTRA="extra-main"
	    UPD_BRANCH_ARCH_MULTILIB="multilib-main"
	    UPD_BRANCH_OS="holoiso"
    else
	    UPD_BRANCH_JUPITER="jupiter"
	    UPD_BRANCH_OS_CORE="holo"
	    UPD_BRANCH_ARCH_CORE="core"
	    UPD_BRANCH_ARCH_EXTRA="extra"
	    UPD_BRANCH_ARCH_MULTILIB="multilib"
	    UPD_BRANCH_OS="holoiso-stable"
    fi

if [ -n "${IS_WIN600}" ]; then
	GAMEPAD_DRV="win600-xpad-dkms"
	INST_MSG1=$(echo "You're running this on Anbernic Win600. A suitable gamepad driver will be installed.")
fi

if [ -n "${IS_STEAMDECK}" ]; then
	FIRMWARE_INSTALL="linux-firmware-neptune"
	INST_MSG1=$(echo "You're running this on a Steam Deck. linux-firmware-neptune will be installed to ensure maximum kernel-side compatibility.")
else
	FIRMWARE_INSTALL="${UPD_BRANCH_OS}/linux-firmware"
fi

# Internet connectivity check
sleep 2
clear
wget -q --spider http://github.com
if [ $? -eq 0 ]; then
	echo "Internet check passed"
	sleep 2
	clear
else
	echo -e "No Internet connection available, exiting...\nUse the iwctl utility to connect Wi-Fi\n(Type iwctl to get an interactive prompt ([iwd]#).\nThen, you can do:\n'device list' to list all th wireless devices available\n'station device scan' to initiate a network scan (where 'device' is the name of your wireless device) (the command will not output anything)\n'station device get-networks' to get the list of available Wi-Fi networks (still, replace 'device' with your wireless device name)\n'station device connect SSID' to connect to a Wi-Fi network, where 'device' is your device name, and 'SSID' is the name of the wireless network\nIf the network requires a passphrase, you will be prompted to enter it\nAlternatively, you can supply it as a command line argument: 'iwctl --passphrase passphrase station device connect SSID' (while not in the interactive iwd prompt)"
	echo 'Press any key to exit...'; read -k1 -s
	exit
fi

# Checking if installer is up to date:
echo "Checking if installer is up to date..."
${CMD_PACMAN_UPDATE}
echo "Pacman DB update complete... Continuing in 2 seconds..."
sleep 2
INSTALLER_UPD_QUERY=$(pacman -Qu | grep holoiso-install-script-gui)
if [ -n "${INSTALLER_UPD_QUERY}" ]; then
  pacman -S --noconfirm --overwrite="*" holoiso-install-script-gui
  sleep 2
  clear
  echo "Installer updated. Please run holoinstall again."
  echo 'Press any key to exit...'; read -k1 -s
  exit
else
  echo "Installer is up to date. Starting installation."
  sleep 2
  clear
fi

# Update system time
if [ $(timedatectl status | grep -c "NTP service: active") -ne 1 ]; then
	# If NTP is not active, enable it.
	timedatectl set-ntp true
	
	# Update the hardware clock.
	hwclock --systohc
fi


if [[ "${CPU_VENDOR}" == "AuthenticAMD" ]]; then
	UCODE_INSTALL_MSG="AMD CPU detected, installing AMD ucode..."
	UCODE_INSTALL="amd-ucode"
else
	UCODE_INSTALL_MSG="Intel CPU detected, installing Intel ucode..."
	UCODE_INSTALL="intel-ucode"
fi

check_mount(){
	if [ $1 != 0 ]; then
		echo "\nError: Something went wrong when mounting $2 partitions. Please try again!\n"
		echo 'Press any key to exit...'; read -k1 -s
		exit 1
	fi
}

check_download(){
	if [ $1 != 0 ]; then
		echo "\nError: Something went wrong when $2.\nPlease make sure you have a stable internet connection!\n"
		echo 'Press any key to exit...'; read -k1 -s
		exit 1
	fi
}

partitioning(){
	DRIVEDEVICE=$(
		lsblk -d -o NAME | sed "1d" | fzf \
			--no-info \
			--tac \
			--header "Select your disk to install HoloISO in" \
			--preview-window up \
			--preview "lsblk -d -o NAME,MAJ:MIN,RM,SIZE,RO,TYPE,VENDOR,MODEL,SERIAL,MOUNTPOINT /dev/{}")

	DEVICE="/dev/${DRIVEDEVICE}"
	
	INSTALLDEVICE="${DEVICE}"

	if [ ! -b $DEVICE ]; then
		echo "$DEVICE not found! Installation Aborted!"
		exit 1
	fi
	lsblk $DEVICE | head -n2 | tail -n1 | grep disk > /dev/null 2>&1
	if [ $? != 0 ]; then
		echo "$DEVICE is not disk type! Installation Aborted!"
		echo "\nNote: If you wish to preform partition install.\nPlease specify the disk drive node first then select \"2\" for partition install."
		exit 1
	fi
	echo "\nChoose your partitioning type:"

	install=$(
		echo "1) Erase entire drive\n2) Install alongside existing OS/Partition (Requires at least 50 GB of free space from the end)" | \
		fzf --tac --no-info --height=3 | \
		cut -c1)

	case $install in
		1)
			destructive=true
			# Umount twice to fully umount the broken install of steam os 3 before installing.
			umount $INSTALLDEVICE* > /dev/null 2>&1
			umount $INSTALLDEVICE* > /dev/null 2>&1
			$INST_MSG1

			echo "WARNING: The following drive is going to be fully erased. ALL DATA ON DRIVE ${DEVICE} WILL BE LOST! \n\n$(lsblk -o NAME,MAJ:MIN,RM,SIZE,RO,TYPE,VENDOR,MODEL,SERIAL,MOUNTPOINT ${DEVICE} | sed "1d")\n\nErase ${DEVICE} and begin installation?"
			warning_response=$(echo "yes\nno" | fzf --tac --height=3 --no-info)

			if [ $warning_response = "yes" ]
			then
				echo "\nWiping partitions..."
				sfdisk --delete ${DEVICE}
				wipefs -a ${DEVICE}
				echo "\nCreating new gpt partitions..."
				parted ${DEVICE} mklabel gpt
			else
				echo "\nNothing has been written.\nYou canceled the destructive install, please try again"
				echo 'Press any key to exit...'; read -k1 -s
				exit 1
			fi
			;;
		2)
			echo "\nHoloISO will be installed alongside existing OS/Partition.\nPlease make sure there are more than 24 GB on the >>END<< of free(unallocate) space available\n"
			parted $DEVICE print free
			echo "HoloISO will be installed on the following free (unallocated) space.\n"
			parted $DEVICE print free | tail -n2 | grep "Free Space"
			if [ $? != 0 ]; then
				echo "Error! No Free Space found on the end of the disk.\nNothing has been written.\nYou canceled the non-destructive install, please try again"
				exit 1
				echo 'Press any key to exit...'; read -k1 -s
			fi
				$INST_MSG1

			echo "HoloISO will be installed on the following free (unallocated) space.\nDoes this look reasonable?\n$(sudo parted ${DEVICE} print free | tail -n2 | grep "Free Space")"
			warning_response=$(echo "yes\nno" | fzf --tac --height=3 --no-info)

			if [ $warning_response = "yes" ]
			then
        		echo "\nBeginning installation..."
			else
				echo "\nNothing has been written.\nYou canceled the non-destructive install, please try again"
				echo 'Press any key to exit...'; read -k1 -s
				exit 1
        		fi
			;;
		esac

	numPartitions=$(grep -c ${DRIVEDEVICE}'[0-9]' /proc/partitions)
	
	echo ${DEVICE} | grep -q -P "^/dev/(nvme|loop|mmcblk)"
	if [ $? -eq 0 ]; then
		INSTALLDEVICE="${DEVICE}p"
		numPartitions=$(grep -c ${DRIVEDEVICE}p /proc/partitions)
	fi

	efiPartNum=$(expr $numPartitions + 1)
	rootPartNum=$(expr $numPartitions + 2)
	homePartNum=$(expr $numPartitions + 3)

	echo "\nCalculating start and end of free space..."
	diskSpace=$(awk '/'${DRIVEDEVICE}'/ {print $3; exit}' /proc/partitions)
	# <= 60GB: typical flash drive
	if [ $diskSpace -lt 60000000 ]; then
		digitMB=8
		realDiskSpace=$(parted ${DEVICE} unit MB print free|head -n2|tail -n1|cut -c 16-20)
	# <= 500GB: typical 512GB hard drive
	elif [ $diskSpace -lt 500000000 ]; then
		digitMB=8
		realDiskSpace=$(parted ${DEVICE} unit MB print free|head -n2|tail -n1|cut -c 20-25)
	# anything else: typical 1024GB hard drive
	else
		digitMB=9
		realDiskSpace=$(parted ${DEVICE} unit MB print free|head -n2|tail -n1|cut -c 20-26)
	fi

	if [ $destructive ]; then
		efiStart=2
	else
		efiStart=$(parted ${DEVICE} unit MB print free|tail -n2|sed s/'        '//|cut -c1-$digitMB|sed s/MB//|sed s/' '//g)
	fi
	efiEnd=$(expr $efiStart + 256)
	rootStart=$efiEnd
	rootEnd=$(expr $rootStart + 24000)

	if [ $efiEnd -gt $realDiskSpace ]; then
		echo "Not enough space available, please choose another disk and try again"
		exit 1
		echo 'Press any key to exit...'; read -k1 -s
	fi

	echo "\nCreating partitions..."
	parted ${DEVICE} mkpart primary fat32 ${efiStart}M ${efiEnd}M
	parted ${DEVICE} set ${efiPartNum} boot on
	parted ${DEVICE} set ${efiPartNum} esp on
	# If the available storage is less than 64GB, don't create /home.
	# If the boot device is mmcblk0, don't create an ext4 partition or it will break steamOS versions
	# released after May 20.
	if [ $diskSpace -lt 64000000 ] || [[ "${DEVICE}" =~ mmcblk0 ]]; then
		parted ${DEVICE} mkpart primary btrfs ${rootStart}M 100%
	else
		parted ${DEVICE} mkpart primary btrfs ${rootStart}M ${rootEnd}M
		parted ${DEVICE} mkpart primary ext4 ${rootEnd}M 100%
		home=true
	fi
	root_partition="${INSTALLDEVICE}${rootPartNum}"
	mkfs -t vfat ${INSTALLDEVICE}${efiPartNum}
	efi_partition="${INSTALLDEVICE}${efiPartNum}"
	fatlabel ${INSTALLDEVICE}${efiPartNum} HOLOEFI
	mkfs -t btrfs -f ${root_partition}
	btrfs filesystem label ${root_partition} holo-root
	if [ $home ]; then
		mkfs -t ext4 -O casefold ${INSTALLDEVICE}${homePartNum}
		home_partition="${INSTALLDEVICE}${homePartNum}"
		e2label "${INSTALLDEVICE}${homePartNum}" holo-home
	fi

	echo "\nPartitioning complete, mounting and pacstrapping..."
}

base_os_install() {
	# Added failsafe check to prevent dualboot being fucked
	#OSROOT=/dev/disk/by-label/holo-root
	#OSHOME=/dev/disk/by-label/holo-home
	#if [[ -f "$OSROOT" ]]; then
    #	echo "It appears that HoloISO installation was found on your device"
	#	read "?Do you want to format your installation or start over? (yN) " OSROOT_REDO
	#	if [[ "${OSROOT_REDO}" == "y" ]] || [[ "${OSROOT_REDO}" == "Y" ]]; then
	#		mkfs -t vfat /dev/disk/by-label/HOLOEFI
	#		mkfs -t btrfs -f /dev/disk/by-label/holo-root
	#		if [[ -f "$OSHOME" ]]; then
	#			echo "Installation with home detected... Formatting..."
	#			mkfs -t ext4 -O casefold /dev/disk/by-label/holo-home
	#			home_partition="/dev/disk/by-label/holo-home"
	#		else
	#			echo "Home partition not required... Skipping..."
	#		fi
	#		root_partition="/dev/disk/by-label/holo-root"
	#		efi_partition="/dev/disk/by-label/HOLOEFI"
	#	elif [[ "${OSROOT_REDO}" == "n" ]] || [[ "${OSROOT_REDO}" == "N" ]]; then
	#		partitioning
	#	fi
	#else
	sleep 1
	clear
	partitioning
	#fi
	# Actual installer below:
	echo "${UCODE_INSTALL_MSG}"
	sleep 1
	clear
	mount -t btrfs -o subvol=/,compress-force=zstd:1,discard,noatime,nodiratime ${root_partition} ${HOLO_INSTALL_DIR} 
	check_mount $? root
	${CMD_MOUNT_BOOT}
	check_mount $? boot
	pacstrap ${HOLO_INSTALL_DIR} --disable-download-timeout base base-devel ${UCODE_INSTALL} linux-neptune linux-neptune-headers ${FIRMWARE_INSTALL}
	check_download $? "installing base package"
	sleep 2
	clear
	if [ $home ]; then
		mount -t ext4 ${home_partition} ${HOLO_INSTALL_DIR}/home
		check_mount $? home
	fi
	
	sleep 1
	clear
	echo "\nBase system installation done, generating fstab..."
	genfstab -U -p /mnt >> /mnt/etc/fstab
	cp /etc/pacman.conf /mnt/etc/pacman.conf
	cp /etc/pacman.d/mirrorlist /mnt/etc/pacman.d/mirrorlist
	cp /etc/pacman.d/holo_mirrorlist /mnt/etc/pacman.d/holo_mirrorlist
	sleep 1
	clear

	echo "Enter hostname for this installation:"
	read HOLOHOSTNAME

	echo ${HOLOHOSTNAME} > ${HOLO_INSTALL_DIR}/etc/hostname
	# Setup password for root
	while true; do
		echo "Set root/system administrator password"
		read -s ROOTPASS
		if [ -z $ROOTPASS ]; then
			echo "Warning: No password was set for user \"root\"!"
			break
		fi
		echo
		echo "Confirm your root password"
		read -s ROOTPASS_CONF
		echo
		if [ $ROOTPASS = $ROOTPASS_CONF ]; then
			break
		fi
		echo "Error: Passwords do not match."
		echo
	done

	# Create user
	NAME_REGEX="^[a-z][-a-z0-9_]*\$"
	while true; do
		echo "Enter username for this installation:"
		read HOLOUSER

		if [ $HOLOUSER = "root" ]; then
			echo "Error: User root already exists."
		elif [ -z $HOLOUSER ]; then
			echo "Error: Please create a user!"
		elif [ ${#HOLOUSER} -gt 32 ]; then
			echo "Error: Username length must not exceed 32 characters!"
		elif [[ ! $HOLOUSER =~ $NAME_REGEX ]]; then
			echo "Error: Invalid username \"$HOLOUSER\"\nUsername needs to follow these rules:\n\n- Must start with a lowercase letter.\n- May only contain lowercase letters, digits, hyphens, and underscores."
		else
			break
		fi
	done

	# Setup password for user
	while true; do
		echo "Set password for $HOLOUSER"
		read -s HOLOPASS
		echo
		echo "Confirm password for $HOLOUSER"
		read -s HOLOPASS_CONF
		echo
		if [ -z $HOLOPASS ]; then
			echo "Please type password for user \"$HOLOUSER\"!"
			HOLOPASS_CONF=unmatched
		fi
		if [ $HOLOPASS = $HOLOPASS_CONF ]; then
			break
		fi
		echo "Error: Passwords do not match."
	done
	
	echo "\nCreating user ${HOLOUSER}..."
	echo -e "${ROOTPASS}\n${ROOTPASS}" | arch-chroot ${HOLO_INSTALL_DIR} passwd root
	arch-chroot ${HOLO_INSTALL_DIR} useradd --create-home ${HOLOUSER}
	echo -e "${HOLOPASS}\n${HOLOPASS}" | arch-chroot ${HOLO_INSTALL_DIR} passwd ${HOLOUSER}
	echo "${HOLOUSER} ALL=(root) NOPASSWD:ALL" > ${HOLO_INSTALL_DIR}/etc/sudoers.d/${HOLOUSER}
	chmod 0440 ${HOLO_INSTALL_DIR}/etc/sudoers.d/${HOLOUSER}
	echo "127.0.1.1    ${HOLOHOSTNAME}" >> ${HOLO_INSTALL_DIR}/etc/hosts
	sleep 1
	clear

	echo "\nInstalling bootloader..."
	arch-chroot ${HOLO_INSTALL_DIR} ${CMD_PACMAN_UPDATE}
	mkdir ${HOLO_INSTALL_DIR}/boot/efi
	mount -t vfat ${efi_partition} ${HOLO_INSTALL_DIR}/boot/efi
	arch-chroot ${HOLO_INSTALL_DIR} ${CMD_PACMAN_INSTALL} ${UPD_BRANCH_OS}/grub breeze-grub efibootmgr inetutils mkinitcpio neofetch networkmanager sddm-wayland
	arch-chroot ${HOLO_INSTALL_DIR} systemctl enable NetworkManager systemd-timesyncd
	arch-chroot ${HOLO_INSTALL_DIR} grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=holo --removable
	arch-chroot ${HOLO_INSTALL_DIR} grub-mkconfig -o /boot/grub/grub.cfg
	sleep 1
	clear

	echo "\nSetting up locale..."
	echo "${SYSTEM_LOCALE}" >> ${HOLO_INSTALL_DIR}/etc/locale.gen
	arch-chroot ${HOLO_INSTALL_DIR} locale-gen
	echo "LANG=$(echo ${SYSTEM_LOCALE} | cut -d' ' -f1)" > ${HOLO_INSTALL_DIR}/etc/locale.conf	
}
full_install() {
	sleep 1
	clear
    echo "Installing full SteamOS 3..."
    sleep 1
    # The actual installation begins here:
	arch-chroot ${HOLO_INSTALL_DIR} ${CMD_PACMAN_UPDATE}
	arch-chroot ${HOLO_INSTALL_DIR} ${CMD_PACMAN_INSTALL} holoiso-main holoiso-updateclient wireplumber ${GAMEPAD_DRV}
	check_download $? "installing full SteamOS 3"
	sleep 1
	clear
	while true
	do
		echo "Please choose your current GPU:"
		HOLO_GPU_TYPE=$(
			echo "1) AMD: Will install Gamescope with Mangohud and FSR support.\n2) Intel: Will install Gamescope without Mangohud and scaling methods support.\n3) NVIDIA (1xxx+ only): Will install proprietary drivers and Gamescope with Mangohud and NIR support." | \
				fzf --exact --no-info --tac --height=4 | cut -c1)

		if [[ "${HOLO_GPU_TYPE}" == "1" ]]; then
	        	echo "Installing gamescope for AMD GPUs..."
			GAMESCOPE_INSTALL=(/usr/bin/pacman --noconfirm -S --needed --overwrite="*" vulkan-radeon lib32-vulkan-radeon ${UPD_BRANCH_OS}/gamescope mesa lib32-mesa)
			break
	    	elif [[ "${HOLO_GPU_TYPE}" == "2" ]]; then
	        	echo "Installing gamescope for Intel GPUs..."
	        	GAMESCOPE_INSTALL=(/usr/bin/pacman --noconfirm -S --needed --overwrite="*" ${UPD_BRANCH_OS}/vulkan-intel ${UPD_BRANCH_OS}/lib32-vulkan-intel mesa lib32-mesa ${UPD_BRANCH_OS}/gamescope)
			break
	    	elif [[ "${HOLO_GPU_TYPE}" == "3" ]]; then
	        	echo "Installing gamescope for NVIDIA GPUs..."
	        	GAMESCOPE_INSTALL=(/usr/bin/pacman --noconfirm -S --needed --overwrite="*" ${UPD_BRANCH_OS}/nvidia-utils ${UPD_BRANCH_OS}/lib32-nvidia-utils ${UPD_BRANCH_OS}/nvidia-dkms ${UPD_BRANCH_OS}/opencl-nvidia ${UPD_BRANCH_OS}/gamescope)
			break
	    	else
        		echo -e "You have made an invalid selection, please try again...\n"
				sleep 2
				clear
		fi
	done
	sleep 1
	clear

	echo "\nConfiguring Steam Deck UI by default..."
	arch-chroot ${HOLO_INSTALL_DIR} ${GAMESCOPE_INSTALL}
	cp /etc/holoinstall/steamos-gamemode.desktop /mnt/home/${HOLOUSER}/Desktop/steamos-gamemode.desktop
	arch-chroot ${HOLO_INSTALL_DIR} chmod +x /home/${HOLOUSER}/Desktop/steamos-gamemode.desktop
	mkdir ${HOLO_INSTALL_DIR}/etc/sddm.conf.d
	echo "[General]\nDisplayServer=wayland\n\n[Autologin]\nUser=${HOLOUSER}\nSession=gamescope-wayland.desktop" >> ${HOLO_INSTALL_DIR}/etc/sddm.conf.d/autologin.conf
	mkdir /mnt/home/${HOLOUSER}/Desktop
	arch-chroot ${HOLO_INSTALL_DIR} ln -s /usr/share/applications/steam.desktop /home/${HOLOUSER}/Desktop/steam.desktop
	arch-chroot ${HOLO_INSTALL_DIR} chown -R ${HOLOUSER}:${HOLOUSER} /home/${HOLOUSER}/Desktop
	arch-chroot ${HOLO_INSTALL_DIR} systemctl enable cups bluetooth sddm holoiso-reboot-tracker
	arch-chroot ${HOLO_INSTALL_DIR} usermod -a -G rfkill ${HOLOUSER}
	arch-chroot ${HOLO_INSTALL_DIR} usermod -a -G wheel ${HOLOUSER}
	arch-chroot ${HOLO_INSTALL_DIR} sed -i 's/steamdeck_stable/steamdeck_publicbeta/g' /usr/bin/steam
	arch-chroot ${HOLO_INSTALL_DIR} sudo -u ${HOLOUSER} steam
	arch-chroot ${HOLO_INSTALL_DIR} ${CMD_PACMAN_INSTALL} flatpak packagekit-qt5 rsync unzip vim
	check_download $? "installing flatpak"
	arch-chroot ${HOLO_INSTALL_DIR} flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
	check_download $? "updating flatpak"
	arch-chroot ${HOLO_INSTALL_DIR} echo "recoveryinit" > /root/.bashrc
	echo "Installing secondary kernels"
	arch-chroot ${HOLO_INSTALL_DIR} ${CMD_PACMAN_INSTALL} linux-holoiso linux-holoiso-headers
	check_download $? "installing secondary kernels"
	arch-chroot ${HOLO_INSTALL_DIR} grub-mkconfig -o /boot/grub/grub.cfg
	sleep 1
	clear
}


# The installer itself. Good wuck.
echo "SteamOS 3 Installer"
echo "Start time: $(date)"
echo "Please choose installation type:"

HOLO_INSTALL_TYPE=$(
	echo "1) barebones (Will install base SteamOS 3 root filesystem and hooks)\n2) deck-experience (Will install full SteamOS 3 including gamescope and Plasma DE)" | \
		fzf --tac --no-info --height=3 | cut -c1)

if [[ "${HOLO_INSTALL_TYPE}" == "1" ]] || [[ "${HOLO_INSTALL_TYPE}" == "barebones" ]]; then
	echo "Installing SteamOS, barebones configuration..."
	base_os_install
	echo "Installation finished! You may reboot now, or type arch-chroot /mnt to make further changes"
	echo 'Press any key to exit...'; read -k1 -s
elif [[ "${HOLO_INSTALL_TYPE}" == "2" ]]; then

	echo "Installing SteamOS, deckperience configuration..."
	base_os_install
	full_install
	echo "Installation finished! You may reboot now, or type arch-chroot /mnt to make further changes"
	echo 'Press any key to exit...'; read -k1 -s
else
	echo "Invalid choice. Exiting installer..."
fi

echo "End time: $(date)"
